% Orsys - docker
% Nicolas Rousset
% Monday, 5th of december

# TP - docker, CI et deploiement

## Introduction

L'objectif de ce tp est d'exécuter le cycle complet de déploiement d'une application web, en intégrant des tests
automatiques (CI - continuous integration) sous github action.

Ce tp est très guidé, et ne nécessite pas de connaissance en développement web. Une connaissance de `git` est
préférable, mais non obligatoire.

Les utilisateurs avancés qui termineraient le tp en avance peuvent tenter leur chance en déployant d'autres images
docker comme :
    - wordpress:6
    - TODO
    - TODO

### Rappel de git et github

`git` est le principal outil de gestion de version utilisée par les développeurs. Il permet de sauvegarder les
différentes versions du code, et est souvent utilisé comme base pour le déploiement - le transfert des fichiers vers
le serveur web distant se fait via git, souvent une `branche` nommée main, master ou prod.

`github` est le principal site d'hébergement public de repository `git` sur internet. On peut y avoir un compte
gratuitement avec quelques limitations, notamment sur le nombre de repository privé.

`git` s'utilise principalement en ligne de commande, les principales lignes de commande sont :

- git clone git@github.com:Aenori/stunning-octo-robot.git => faire une copie locale d'un repository distant
- git commit -am "Some commit message" => sauvegarder localement les modifications de code
- git push => transférer les modifications locales vers un serveur distant
- git push HEROKU TODO

## Mise en place

**Etape 1:** Si vous n'en avez pas, créez un compte gratuit sur github : [https://github.com](https://github.com)

**Etape 2:** Allez sur le repository du formateur :
[https://github.com/Aenori/stunning-octo-robot](https://github.com/Aenori/stunning-octo-robot)

Et forkez le repository sur votre compte en cliquant sur l'option fork en haut à droite :

![Github fork](img/github_fork_highlight.png "Github fork")

**Etpae 3:** Allez sur votre compte et vérifiez que vous avez un repository qui s'appelle **stunning-octo-robot**

**Etape 4:** Clonez localement le repository localement :

    git clone git@github.com:[NomDeVotreCompteGithub]/stunning-octo-robot.git

![Github clone](img/github_clone.png "Github clone")

La commande ci-dessus crééra dans votre répertoire un sous répertoire `stunning-octo-robot` qui contiendra un fichier
`application.py` ainsi que quelques sous-répertoires.

Parfait, vous êtes prêt à commencer le tp !

Remarque sur le site :

Il s'agit d'un petit projet utilisant python et flask. Cet environnement a été choisi car il nécessite peu de ligne de
code et est simple à utiliser.

Le projet compte 4 routes (ie url) différentes, pour l'instant, seule la racine et hello fonctionneront, c'est normal.

## Partie 1 : Ajout d'une image docker local

**Etape 5:** Ajout du Dockerfile

Placez vous à la racine de votre répertoire et créez un `Dockerfile` pour lancer le projet. Vous aurez besoin de 5
lignes :

- une image de base python 3.9
- la commande pour installer une dépendance python :

    RUN pip install flask

- la commande pour lancer l'application web python :

    CMD ["flask", "--app", "application.py", "run", "--host=0.0.0.0"]

- plus une ou deux lignes pour ajouter le code du répertoire à l'image

**Etape 6:** Test du dockerfile

Utiliser les deux commandes build et run pour lancer l'application dans un conteneur. Vous aurez besoin de lier le
port 5000 du conteneur au port 5000 de la machine hôte

Maintenant connectez vous sur :

http://localhost:5000

Vous devriez voir indiquez Hello, world !. Si c'est le cas, félicitations !

## Partie 2 : integration continue

A noter que cette partie n'est pas indispensable en terme de maîtrise de Docker, il s'agit plus d'illustrer une
application très intéressante de Docker.

**Etape 7:** Ajout de l'integration continue

Allez sur votre compte Github, sur votre repository `stunning-octo-robot` et cliquez sur `actions`

![Github action](img/github_actions_highlight.png "Github action")

\newpage

Ensuite sélectionnez l'option `python application` (à priori en bas à gauche)

![Python application](img/github_actions_python_application_highlight.png "Github action")

\newpage

Et enfin valider le fichier de configuration tel quel en cliquant sur `start commit` (voir les 3 images suivantes)

![Validate](img/github_action_commit_file.png "Validate config file")

\newpage

Félicitations, vous venez d'activer l'intégration continue !
A noter qu'il peut être nécessaire d'utiliser `git pull` pour récupérer le fichier créé par github dans le repository
(sous le chemin .github/workflows/python-app.yml)

Normalement quand vous faites un push, vous devriez voir apparaître dans l'onglet "actions" du repository github un
item de workflow.

Vous pouvez essayer par exemple de modifier le fichier templates/hello.html en remplaçant par exemple Hello, World! par
juste Hello, et vous constaterez que github détecte automatiquement que quelque chose ne va pas.

Mais où intervient Docker ici ? En fait si vous ouvrez le fichier de configuration

    .github/workflows/python-app.yml

Vous constaterez que Github fait tourner les tests unitaires sous une image docker ubuntu:latest et que le test de
l'application passe par des steps identiques à ceux d'un Dockerfile.

Il est ainsi possible de customiser cette image, y compris en utilisant un Dockerfile customisé. Nous ne développerons
 pas cette possibilité, par manque de temps et car cela n'est pas forcément possible avec les options gratuites de
  github.

## Partie 3 : ajout d'une dépendance système

Dans cette partie nous allons ajouter une dépendance système, ie une programme externe à python et qui n'est donc pas
gérée par la gestion des dépendances de python.

## Partie 4 : ajout d'une base de donnée

Dans cette partie nous allons ajouter une base de donnée. Cela se fera localement en ajoutant

## Partie 5 : déploiement Heroku

Enfin, nous allons déployer notre application sous sur le web en utilisant docker.